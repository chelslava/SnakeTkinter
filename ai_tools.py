import math
import random
import time


class AdvancedSnakeAI:
    """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ò–ò –¥–ª—è –∏–≥—Ä—ã Snake —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∞–º–∏"""

    def __init__(self):
        self.memory = {}  # –ö—ç—à –¥–ª—è –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Ä–µ—à–µ–Ω–∏–π
        self.learning_rate = 0.1
        self.exploration_rate = 0.2

    def a_star_pathfinding(self, snake, food, obstacles, max_iterations=1000):
        """–ê–ª–≥–æ—Ä–∏—Ç–º A* –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫—Ä–∞—Ç—á–∞–π—à–µ–≥–æ –ø—É—Ç–∏ –∫ –µ–¥–µ"""
        start = snake[0]
        goal = food

        if start == goal:
            return []

        open_set = [(0, start)]  # (f_score, position)
        came_from = {}
        g_score = {start: 0}
        f_score = {start: self.heuristic(start, goal)}

        iterations = 0

        while open_set and iterations < max_iterations:
            iterations += 1
            current_f, current = min(open_set)
            open_set.remove((current_f, current))

            if current == goal:
                return self.reconstruct_path(came_from, current)

            for direction in ["Up", "Down", "Left", "Right"]:
                neighbor = self.get_next_position(current, direction)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–∏
                if not self.is_valid_position(neighbor, snake, obstacles):
                    continue

                tentative_g = g_score[current] + 1

                if neighbor not in g_score or tentative_g < g_score[neighbor]:
                    came_from[neighbor] = current
                    g_score[neighbor] = tentative_g
                    f_score[neighbor] = tentative_g + self.heuristic(neighbor, goal)

                    if neighbor not in [pos for _, pos in open_set]:
                        open_set.append((f_score[neighbor], neighbor))

        return None  # –ü—É—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω

    def heuristic(self, pos1, pos2):
        """–ú–∞–Ω—Ö—ç—Ç—Ç–µ–Ω—Å–∫–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏"""
        return abs(pos1[0] - pos2[0]) + abs(pos1[1] - pos2[1])

    def get_next_position(self, pos, direction):
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â—É—é –ø–æ–∑–∏—Ü–∏—é –ø—Ä–∏ –¥–≤–∏–∂–µ–Ω–∏–∏ –≤ –∑–∞–¥–∞–Ω–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏"""
        x, y = pos
        cell_size = 10  # –†–∞–∑–º–µ—Ä –∫–ª–µ—Ç–∫–∏

        if direction == "Up":
            return (x, y - cell_size)
        elif direction == "Down":
            return (x, y + cell_size)
        elif direction == "Left":
            return (x - cell_size, y)
        elif direction == "Right":
            return (x + cell_size, y)
        return pos

    def is_valid_position(self, pos, snake, obstacles):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –ø–æ–∑–∏—Ü–∏–∏"""
        x, y = pos
        width, height = 400, 400  # –†–∞–∑–º–µ—Ä—ã –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä–∞–Ω–∏—Ü
        if x < 0 or x >= width or y < 0 or y >= height:
            return False

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è —Å –∑–º–µ–µ–π
        if pos in snake:
            return False

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è —Å –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è–º–∏
        if pos in obstacles:
            return False

        return True

    def reconstruct_path(self, came_from, current):
        """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—É—Ç–∏ –∏–∑ —Å–ª–æ–≤–∞—Ä—è came_from"""
        path = []
        while current in came_from:
            path.append(current)
            current = came_from[current]
        path.reverse()
        return path

    def predict_future_collisions(self, snake, direction, obstacles, steps=5):
        """–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –±—É–¥—É—â–∏—Ö —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–π"""
        head = snake[0]
        future_positions = []
        current_pos = head

        for step in range(steps):
            current_pos = self.get_next_position(current_pos, direction)
            if not self.is_valid_position(current_pos, snake, obstacles):
                return True  # –°—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–æ
            future_positions.append(current_pos)

        return False

    def calculate_survival_probability(self, snake, food, obstacles):
        """–†–∞—Å—á–µ—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –≤—ã–∂–∏–≤–∞–Ω–∏—è"""
        head = snake[0]
        safe_directions = 0
        total_directions = 4

        for direction in ["Up", "Down", "Left", "Right"]:
            next_pos = self.get_next_position(head, direction)
            if self.is_valid_position(next_pos, snake, obstacles):
                safe_directions += 1

        # –ë–∞–∑–æ–≤–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤—ã–∂–∏–≤–∞–Ω–∏—è
        survival_prob = safe_directions / total_directions

        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–ª–∏–Ω—ã –∑–º–µ–∏
        snake_length_factor = max(0.5, 1 - len(snake) * 0.02)

        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π
        obstacle_factor = max(0.3, 1 - len(obstacles) * 0.1)

        return survival_prob * snake_length_factor * obstacle_factor

    def generate_strategic_advice(self, snake, food, obstacles):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏—Ö —Å–æ–≤–µ—Ç–æ–≤"""
        advice = []
        head = snake[0]

        # –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏
        survival_prob = self.calculate_survival_probability(snake, food, obstacles)

        if survival_prob < 0.3:
            advice.append("üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –°–ò–¢–£–ê–¶–ò–Ø! –ò—â–∏—Ç–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø—É—Ç—å!")
        elif survival_prob < 0.6:
            advice.append("‚ö†Ô∏è –û—Å—Ç–æ—Ä–æ–∂–Ω–æ! –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –¥–ª—è –º–∞–Ω–µ–≤—Ä–∞")

        # –ê–Ω–∞–ª–∏–∑ –ø—É—Ç–∏ –∫ –µ–¥–µ
        path = self.a_star_pathfinding(snake, food, obstacles)
        if path:
            path_length = len(path)
            if path_length > 20:
                advice.append("üìè –î–ª–∏–Ω–Ω—ã–π –ø—É—Ç—å –∫ –µ–¥–µ - –≤–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–∏—Ç –ø–æ–∏—Å–∫–∞—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã")
            elif path_length < 5:
                advice.append("üéØ –ï–¥–∞ –±–ª–∏–∑–∫–æ! –ë—É–¥—å—Ç–µ —Ç–æ—á–Ω—ã –≤ –¥–≤–∏–∂–µ–Ω–∏—è—Ö")
        else:
            advice.append("‚ùå –ü—Ä—è–º–æ–π –ø—É—Ç—å –∫ –µ–¥–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")

        # –ê–Ω–∞–ª–∏–∑ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
        free_space = self.calculate_free_space(snake, obstacles)
        if free_space < 50:
            advice.append("üì¶ –ú–∞–ª–æ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞ - –ø–ª–∞–Ω–∏—Ä—É–π—Ç–µ –¥–≤–∏–∂–µ–Ω–∏—è –∑–∞—Ä–∞–Ω–µ–µ")

        return advice

    def calculate_free_space(self, snake, obstacles):
        """–ü–æ–¥—Å—á–µ—Ç —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞"""
        total_cells = (400 // 10) * (400 // 10)  # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–µ—Ç–æ–∫
        occupied = len(snake) + len(obstacles)
        return total_cells - occupied

    def adaptive_difficulty_analysis(self, snake, food, obstacles, score):
        """–ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —Å —É—á–µ—Ç–æ–º —Å—á–µ—Ç–∞"""
        base_difficulty = self.calculate_base_difficulty(snake, food, obstacles)

        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—á–µ—Ç–∞
        score_factor = min(1.5, 1 + score * 0.05)

        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–∏ –∏–≥—Ä—ã (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
        time_factor = 1.0  # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏

        final_difficulty = base_difficulty * score_factor * time_factor

        return min(100, final_difficulty)

    def calculate_base_difficulty(self, snake, food, obstacles):
        """–ë–∞–∑–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏"""
        head = snake[0]

        # –§–∞–∫—Ç–æ—Ä—ã —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        factors = {
            'snake_length': min(30, len(snake) * 2),
            'obstacles': len(obstacles) * 5,
            'space_constraint': max(0, 50 - self.calculate_free_space(snake, obstacles) / 2),
            'food_distance': min(20, math.sqrt((food[0] - head[0]) ** 2 + (food[1] - head[1]) ** 2) / 10),
            'mobility': max(0, 20 - len(self.get_safe_directions(snake, food, obstacles)) * 5)
        }

        return sum(factors.values())

    def get_safe_directions(self, snake, food, obstacles):
        """–ü–æ–ª—É—á–∏—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–≤–∏–∂–µ–Ω–∏—è"""
        head = snake[0]
        safe_dirs = []

        for direction in ["Up", "Down", "Left", "Right"]:
            next_pos = self.get_next_position(head, direction)
            if self.is_valid_position(next_pos, snake, obstacles):
                safe_dirs.append(direction)

        return safe_dirs

    def reinforcement_learning_decision(self, snake, food, obstacles, state_key):
        """–ü—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—Å—Ç–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è —Å –ø–æ–¥–∫—Ä–µ–ø–ª–µ–Ω–∏–µ–º"""
        if state_key not in self.memory:
            self.memory[state_key] = {'Up': 0, 'Down': 0, 'Left': 0, 'Right': 0}

        # –í—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è (exploration vs exploitation)
        if random.random() < self.exploration_rate:
            # –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ - —Å–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä
            safe_dirs = self.get_safe_directions(snake, food, obstacles)
            if safe_dirs:
                return random.choice(safe_dirs)
        else:
            # –≠–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏—è - –≤—ã–±–æ—Ä –ª—É—á—à–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
            safe_dirs = self.get_safe_directions(snake, food, obstacles)
            if safe_dirs:
                best_action = max(safe_dirs, key=lambda d: self.memory[state_key][d])
                return best_action

        return None

    def update_memory(self, state_key, action, reward):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ª—É—á–µ–Ω–Ω–æ–π –Ω–∞–≥—Ä–∞–¥—ã"""
        if state_key in self.memory and action in self.memory[state_key]:
            current_value = self.memory[state_key][action]
            self.memory[state_key][action] = current_value + self.learning_rate * (reward - current_value)

    def create_state_key(self, snake, food, obstacles):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª—é—á–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ–±—É—á–µ–Ω–∏—è"""
        head = snake[0]
        food_direction = self.get_relative_direction(head, food)
        obstacle_directions = [self.get_relative_direction(head, obs) for obs in obstacles[:3]]

        return f"{food_direction}_{'_'.join(obstacle_directions)}_{len(snake)}"

    def get_relative_direction(self, from_pos, to_pos):
        """–ü–æ–ª—É—á–∏—Ç—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏"""
        dx = to_pos[0] - from_pos[0]
        dy = to_pos[1] - from_pos[1]

        if abs(dx) > abs(dy):
            return "Right" if dx > 0 else "Left"
        else:
            return "Down" if dy > 0 else "Up"

    def find_path_to_food(self, snake, food, obstacles):
        """–ù–∞–π—Ç–∏ –ø—É—Ç—å –∫ –µ–¥–µ –∏—Å–ø–æ–ª—å–∑—É—è A* –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º"""
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º A*
        path = self.a_star_pathfinding(snake, food, obstacles)
        if path and len(path) > 0:
            next_pos = path[0]
            head = snake[0]
            dx, dy = next_pos[0] - head[0], next_pos[1] - head[1]
            if dx > 0:
                return "Right"
            elif dx < 0:
                return "Left"
            elif dy > 0:
                return "Down"
            elif dy < 0:
                return "Up"

        # Fallback: –ø—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞
        head = snake[0]
        safe_dirs = self.get_safe_directions(snake, food, obstacles)

        if not safe_dirs:
            return None

        # –ü—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞: –∏–¥–µ–º –≤ —Å—Ç–æ—Ä–æ–Ω—É –µ–¥—ã, –µ—Å–ª–∏ —ç—Ç–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ
        dx = food[0] - head[0]
        dy = food[1] - head[1]

        # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ
        if dx > 0 and "Right" in safe_dirs:
            return "Right"
        elif dx < 0 and "Left" in safe_dirs:
            return "Left"

        # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ
        if dy > 0 and "Down" in safe_dirs:
            return "Down"
        elif dy < 0 and "Up" in safe_dirs:
            return "Up"

        # –ï—Å–ª–∏ –ø—Ä—è–º–æ–π –ø—É—Ç—å –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω, –≤—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        return random.choice(safe_dirs) if safe_dirs else None

    def generate_suggestions(self, snake, food, obstacles):
        """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è –∏–≥—Ä–æ–∫–∞"""
        suggestions = []
        head = snake[0]
        safe_dirs = self.get_safe_directions(snake, food, obstacles)

        if not safe_dirs:
            suggestions.append("‚ö†Ô∏è –û–ø–∞—Å–Ω–æ—Å—Ç—å! –ù–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π")
            return suggestions

        # –ü–æ–¥—Å–∫–∞–∑–∫–∞ –æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –∫ –µ–¥–µ
        best_dir = self.find_path_to_food(snake, food, obstacles)
        if best_dir:
            suggestions.append(f"üéØ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {best_dir}")

        # –ü–æ–¥—Å–∫–∞–∑–∫–∞ –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
        if len(safe_dirs) <= 2:
            suggestions.append(f"‚ö†Ô∏è –¢–æ–ª—å–∫–æ {len(safe_dirs)} –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è")

        # –ü–æ–¥—Å–∫–∞–∑–∫–∞ –æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏ –¥–æ –µ–¥—ã
        distance = math.sqrt((food[0] - head[0]) ** 2 + (food[1] - head[1]) ** 2)
        if distance > 100:
            suggestions.append("üìè –ï–¥–∞ –¥–∞–ª–µ–∫–æ, –±—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã")

        return suggestions

    def analyze_difficulty(self, snake, food, obstacles):
        """–ê–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —Ç–µ–∫—É—â–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏"""
        return self.calculate_base_difficulty(snake, food, obstacles)

    def count_free_space(self, snake, obstacles):
        """–ü–æ–¥—Å—á–∏—Ç–∞—Ç—å —Å–≤–æ–±–æ–¥–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ"""
        total_cells = (400 // 10) * (400 // 10)
        occupied_cells = len(snake) + len(obstacles)
        return total_cells - occupied_cells


class GameAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∏–≥—Ä–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""

    def __init__(self):
        self.game_history = []
        self.performance_metrics = {}

    def record_move(self, snake, food, obstacles, direction, score, timestamp=None):
        """–ó–∞–ø–∏—Å—å —Ö–æ–¥–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é"""
        if timestamp is None:
            timestamp = time.time()

        move_data = {
            'timestamp': timestamp,
            'snake_length': len(snake),
            'score': score,
            'direction': direction,
            'food_distance': math.sqrt((food[0] - snake[0][0]) ** 2 + (food[1] - snake[0][1]) ** 2),
            'obstacles_count': len(obstacles),
            'head_position': snake[0]
        }

        self.game_history.append(move_data)

    def analyze_performance(self):
        """–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏–≥—Ä—ã"""
        if not self.game_history:
            return {}

        metrics = {
            'total_moves': len(self.game_history),
            'max_score': max(move['score'] for move in self.game_history),
            'max_snake_length': max(move['snake_length'] for move in self.game_history),
            'avg_food_distance': sum(move['food_distance'] for move in self.game_history) / len(self.game_history),
            'direction_preference': self.analyze_direction_preference(),
            'efficiency_score': self.calculate_efficiency_score()
        }

        return metrics

    def analyze_direction_preference(self):
        """–ê–Ω–∞–ª–∏–∑ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Ö –¥–≤–∏–∂–µ–Ω–∏—è"""
        directions = [move['direction'] for move in self.game_history]
        direction_counts = {}

        for direction in directions:
            direction_counts[direction] = direction_counts.get(direction, 0) + 1

        return direction_counts

    def calculate_efficiency_score(self):
        """–†–∞—Å—á–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏–≥—Ä—ã"""
        if len(self.game_history) < 2:
            return 0

        # –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å = (–º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å—á–µ—Ç) / (–æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ö–æ–¥–æ–≤)
        max_score = max(move['score'] for move in self.game_history)
        total_moves = len(self.game_history)

        return max_score / total_moves if total_moves > 0 else 0

    def get_recommendations(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞"""
        metrics = self.analyze_performance()
        recommendations = []

        if metrics['efficiency_score'] < 0.1:
            recommendations.append("üìà –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –¥–≤–∏–∂–µ–Ω–∏—è")

        direction_prefs = metrics['direction_preference']
        if direction_prefs:
            most_used = max(direction_prefs, key=direction_prefs.get)
            least_used = min(direction_prefs, key=direction_prefs.get)
            recommendations.append(f"üîÑ –†–∞–∑–Ω–æ–æ–±—Ä–∞–∑—å—Ç–µ –¥–≤–∏–∂–µ–Ω–∏—è! –ú–µ–Ω—å—à–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ {most_used}, –±–æ–ª—å—à–µ {least_used}")

        if metrics['avg_food_distance'] > 100:
            recommendations.append("üéØ –£–ª—É—á—à–∏—Ç–µ –Ω–∞–≤–∏–≥–∞—Ü–∏—é –∫ –µ–¥–µ")

        return recommendations